Str2Code (String to Code) is a utility program that allows you to extract
literal quoted string constants from a BASIC program, and relocate them
into a code segment.  The strings are then retrieved as needed by a call to
a special function that is generated by Str2Code.  However, this does not
require any additional work on your part, because Str2Code creates a copy
of your program that has been modified to reference that function.

As you may already know, much of the data in a program competes for space
in a single 64K segment named DGROUP.  This data segment includes all
non-array variables, static arrays, string variables, String descriptors,
DATA items, file buffers, and quoted string constants.  Therefore, by
removing quoted strings from that segment, you will have more room for the
other data types.

All references to the literal strings in your program are replaced by an
equivalent call to a string function.  This function accepts an integer
argument that identifies which string is to be returned.  Understand that
Str2Code does not actually modify your BASIC source file.  Rather, it
creates a new file with the necessary changes.  If you have a program named
PROGRAM.BAS that contains the statement:

    PRINT "This is a test";      'display a message

it will be rewritten in the new file as:

    PRINT ProgramCS$(1);      'display a message

The string "This is a test" is fourteen characters long, and that many more
bytes (less four for overhead) will now be available in your program.

If you have a source line where you don't want this replacement to occur,
you can use a meta-command '$N to force Str2Code to skip the line.

    Temp$ = "Don't extract me"   '$N This line will not be modified

Note that quoted strings contained in the following types of statements are
never extracted:

    CONST   ie. CONST PressMsg$ = "Press any key to continue"
    DATA        DATA "First line of text"
    INPUT       INPUT "Enter a file name: ", FileName$

In order to access the string information that has been extracted, Str2Code
creates an object file that you will link with.  It also generates an
Include file that lets you quickly test the modified program in the QB and
QBX editing environment, without having to create a Quick Library.  This
Include file merely dimensions and assigns a string array with the same
name as the function, and does not actually free any string space.

Str2Code is very easy to use.  To create a modified copy of a program named
MYPROG.BAS simply enter:

    str2code myprog;

The default .BAS file extension is implied, and three new files will be
created.  Each of these file is described below.


MYPROG.BA$

This is the newly created BASIC source file that is ready to be compiled.
All literal strings longer than four characters have been replaced with
their function equivalent.  A DECLARE statement is added as the first line
naming MyProgCS$ as the string function.  Further, to provide a quick
turnaround for testing purpose, a remarked- out INCLUDE statement is also
created.  When unremmed, a file containing a shared string array that
mimics the function is used.  The statement PRINT MyProg$(13) can be either
a function call or an array reference.  Note that to use the string array
you must also comment out the function declaration.


MYPROG.OB$

This is the object file that contains the actual string data.  In addition,
a short (41 bytes) assembly language subroutine is included within this
file to implement the function itself.


MYPROG.BI$

This file contains the parallel string array described earlier, which may
be used quickly as a test.  You may also use this file to make changes to
the strings without re-working the original BASIC source file.

Once the BASIC source file has been processed, you are ready to compile the
new file like this:

    bc [/options] myprog.ba$;

Notice that you must specify the .BA$ extension.  Next, you will link the
compiled program with the object file that contains the extracted strings.
You must also link a third object file provided with the Str2Code utility.
If you are using QuickBASIC or BASIC 7 with near strings you will use
S2CKRNL.OBJ; for far strings you will instead use S2CKRNLF.OBJ.  This is
shown below.

    link myprog + myprog.ob$ + s2ckrnl; or
    link myprog + myprog.ob$ + s2ckrnlf;

Understand that regardless of which string kernel routine you are using,
the function code is only included once for the entire application.  This
allows Str2Code to operate without distinction between near and far
strings, and it keeps the code overhead to only 41 bytes per module.

Str2Code also accepts two numeric parameters that let you control the
shortest string that will be extracted, as well as the maximum number of
strings to accommodate.  The full calling syntax of STR2CODE is as follows:

STR2CODE MYPROG[.BAS], [MYPROG[.BA$]], [MYPROG[.OB$]], [MYPROG[.BI$]], _
  [shortest], [maxstrings] [;]

If the semicolon is omitted, you will be prompted to enter numeric values
for the last two parameters.  Since each invocation of a string function
requires four bytes of data storage for a string descriptor, nothing is
gained by extracting strings less than four characters in length.  Further,
since BASIC combines like string data anyway, there may be occasions where
leaving even longer strings will make sense.  If you truly need as much
string memory as possible, we recommend experimenting with values between 5
and 10 for the minimum extracted string length.

By default, Str2Code can extract up to 750 quoted strings, which should be
sufficient for most programs.  This value reflects the size of the array
used internally to track each unique string.  If more than that many
strings are encountered, the program will restart itself with a higher
value.  You can save the extra time required to read the file twice by
setting this value on invokation.  If the error persists, try raising the
minimum string length parameter.  By examining the generated Include file
you can determine how far into your program Str2Code was able to progress.

Str2Code can also be used to create custom message functions that may be
used in multiple applications.  Simply create a file that contains each
string surrounded by quotes on a separate line, and run Str2Code on that
file:

    str2code msgfile.txt , nul , , nul;
    str2code myprog;
    bc myprog.ba$;
    link myprog + myprog.ob$ + msgfile.ob$ + s2ckrnl[f];

Then, when your program uses the statement PRINT MsgFile$(3) the third line
of the text file will be displayed.
